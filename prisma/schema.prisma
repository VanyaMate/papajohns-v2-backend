generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_DB_URL")
}

model FoodMark {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  text  String
  color String
  pizza Pizza[]
}

model FoodCategory {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  icon  String
}

model PizzaAdditional {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  icon  String
  price Float

  linkToSizes       PizzaSizeToAdditional[]
  linkToAdditionals PizzaToAdditionals[]
}

model PizzaSizeToAdditional {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  sizeId       String @db.ObjectId
  additionalId String @db.ObjectId

  size       PizzaSize       @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  additional PizzaAdditional @relation(fields: [additionalId], references: [id], onDelete: Cascade)

  @@unique([sizeId, additionalId])
}

model PizzaSize {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  size       String
  multiplier Float

  linkToAdditional PizzaSizeToAdditional[]
  linkToDough      PizzaDoughToSize[]
}

model PizzaDoughToSize {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  doughId String @db.ObjectId
  sizeId  String @db.ObjectId

  dough PizzaDough @relation(fields: [doughId], references: [id], onDelete: Cascade)
  size  PizzaSize  @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  @@unique([doughId, sizeId])
}

model PizzaDough {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  price Float

  linkToSizes  PizzaDoughToSize[]
  linkToDoughs PizzaToDough[]
}

model PizzaNutritionalValue {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  value Float

  pizzaId String @db.ObjectId
  pizza   Pizza  @relation(fields: [pizzaId], references: [id], onDelete: Cascade)
}

model PizzaToDough {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  doughId String @db.ObjectId
  pizzaId String @db.ObjectId

  dough PizzaDough @relation(fields: [doughId], references: [id], onDelete: Cascade)
  pizza Pizza      @relation(fields: [pizzaId], references: [id], onDelete: Cascade)

  @@unique([doughId, pizzaId])
}

model PizzaToAdditionals {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  additionalId String @db.ObjectId
  pizzaId      String @db.ObjectId

  additional PizzaAdditional @relation(fields: [additionalId], references: [id], onDelete: Cascade)
  pizza      Pizza           @relation(fields: [pizzaId], references: [id], onDelete: Cascade)

  @@unique([additionalId, pizzaId])
}

model Pizza {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  title       String
  description String
  person      Int
  price       Float
  foodMarkId  String @db.ObjectId

  mark             FoodMark                @relation(fields: [foodMarkId], references: [id])
  dough            PizzaToDough[]
  additional       PizzaToAdditionals[]
  nutritionalValue PizzaNutritionalValue[]
}
